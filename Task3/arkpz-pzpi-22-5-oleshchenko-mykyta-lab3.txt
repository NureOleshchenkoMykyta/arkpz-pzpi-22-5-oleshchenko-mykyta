Міністерство освіти та науки України

Харківський національний університет радіоелектроніки









Лабораторна робота №3

з дисципліни: «Аналіз та рефакторинг коду»













Виконав

ст. гр. ПЗПІ-22-5

Олещенко Микита Сергійович





                                       Перевірив

                                       Дашенков Д.С.







Харків 2024





Лабораторна робота №3



     	Мета: Розробити бізнес-логіку та функції адміністрування серверної частини програмної системи.



Хід роботи

Було розроблено бізнес-логіку та функції адміністрування серверної частини програмної системи.

Основний функціонал програмної системи виглядає наступним чином: користувач, залогувавшись в акаунт, має змогу надіслати запит про аналіз свого стану. Пристрій вимірює дані, після чого вони аналізуються, результати заносяться у базу даних та користувач отримує висновок про свій стан. Користувач також може зміновати та видаляти результати аналізів, а також створити нотатку до свого аналізу або видалити, якщо вона наявна.

Адміністратор може видаляти наявні акаунти, передивлятися інформацію про всі наявні акаунти та результати й нотатки конкретного акаунту.

Висновок

У ході лабораторної роботи було реалізовано основну мету: бізнес-логіку та функції адміністрування серверної частини для програмної системи аналізу психоемоційного стану людини. Також було створено UML діаграми діяльності та взаємодії (послідовності)











ДОДАТОК А

UML-діаграма діяльності для серверної частини





Рисунок А – UML-діаграма діяльності для серверної частини











ДОДАТОК Б

UML діаграма взаємодії для серверної частини





Рисунок Б – UML діаграма взаємодії для серверної частини






















ДОДАТОК В

Приклад програмного коду (Уривок з файлу app.py)



#Отримати всі аккаунти

@app.route('/accounts', methods=['GET'])

@role_required('admin')

def get_all_accounts():

"""


get_all_accounts


---


tags:


 - Account


operationId: "Отримати всі акаунти"


responses:


 200:


   description: Список акаунтів


   schema:


     type: array


     items:


       type: object


       properties:


         AccountID:


           type: integer


         Email:


           type: string


         Name:


           type: string


"""


query = "SELECT AccountID, Email, Name FROM analysisstate.account;"


accounts = execute_query(query)




return jsonify(accounts), 200




#Видалення акаунта по e-mail

@app.route('/accounts', methods=['DELETE'])

@role_required('admin')

def delete_account():

"""


delete_account


---


tags:


 - Account


operationId: "Видалення акаунта по e-mail"


parameters:


 - name: email


   in: query


   type: string


   required: true


   description: E-mail акаунта для видалення


responses:


 200:


   description: Акаунт успішно видалено


 400:


   description: Помилка при видаленні акаунта


"""


email = request.args.get('email')  # Отримуємо e-mail з параметрів запиту




if not email:


   return jsonify({"message": "Не вказаний e-mail"}), 400




try:


   # Отримуємо AccountID по e-mail


   account_id_result = execute_query(


       "SELECT AccountID FROM analysisstate.account WHERE Email = %s;", (email,)


   )




   if not account_id_result:


       return jsonify({"message": "Акаунт не знайдено за вказаним e-mail"}), 400




   # Беремо AccountID із результату запиту


   account_id = account_id_result[0][0]  # Отримуємо перший елемент першого кортежу




   # Видалення пов'язаних даних


   execute_query("DELETE FROM analysisstate.results WHERE AccountID = %s;", (account_id,))


   execute_query("DELETE FROM analysisstate.notes WHERE AccountID = %s;", (account_id,))




   # Видалення акаунта


   execute_query("DELETE FROM analysisstate.account WHERE AccountID = %s;", (account_id,))




   return jsonify({"message": "Акаунт і пов'язані дані успішно видалено"}), 200




except Exception as e:


   return jsonify({"message": f"Помилка при видаленні акаунта: {str(e)}"}), 400


